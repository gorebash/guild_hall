// import { initializeApp } from "firebase/app";
// import { getMessaging, onBackgroundMessage } from "firebase/messaging/sw";

// export default class FirebaseMessagingController {
//   messaging;

//   constructor() {
//     const firebaseApp = initializeApp({
//       apiKey: "AIzaSyBmJqQ4JUVhAt-1arUhxsZ-GdI1OzbsYkY",
//       authDomain: "guild-hall-200d4.firebaseapp.com",
//       projectId: "guild-hall-200d4",
//       storageBucket: "guild-hall-200d4.appspot.com",
//       messagingSenderId: "619066287243",
//       appId: "1:619066287243:web:68de9957a156a78fc9208e",
//       measurementId: "G-DJ72E9PT09",
//     });

//     this.messaging = getMessaging(firebaseApp);
//     this.listen();
//   }

//   listen() {
//     onBackgroundMessage(this.messaging, (payload) => {
//       console.log(
//         "[firebase-messaging-sw.js] Received background message ",
//         payload,
//       );
//       // Customize notification here
//       const notificationTitle = "Background Message Title";
//       const notificationOptions = {
//         body: "Background Message body.",
//         icon: "/firebase-logo.png",
//       };

//       self.registration.showNotification(
//         notificationTitle,
//         notificationOptions,
//       );
//     });
//   }
// }

var CACHE_VERSION = "v1";
var CACHE_NAME = CACHE_VERSION + ":sw-cached-assets";

function onInstall(event) {
  console.log("[Serviceworker]", "Installing!", event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '<%= asset_path "application.js" %>',
        '<%= asset_path "application.css" %>',

        "/offline.html",
      ]);
    }),
  );
}

function onActivate(event) {
  console.log("[Serviceworker]", "Service Worker Activating!", event);
  event.waitUntil(
    caches.keys().then(function (cacheNames) {
      return Promise.all(
        cacheNames
          .filter(function (cacheName) {
            // Return true if you want to remove this cache,
            // but remember that caches are shared across
            // the whole origin
            return cacheName.indexOf(CACHE_VERSION) !== 0;
          })
          .map(function (cacheName) {
            return caches.delete(cacheName);
          }),
      );
    }),
  );
}

// Borrowed from https://github.com/TalAter/UpUp
function onFetch(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).catch(function () {
      // if it fails, try to return request from the cache
      return caches.match(event.request).then(function (response) {
        if (response) {
          return response;
        }
        // if not found in cache, return default offline content for navigate requests
        if (
          event.request.mode === "navigate" ||
          (event.request.method === "GET" &&
            event.request.headers.get("accept").includes("text/html"))
        ) {
          console.log("[Serviceworker]", "Fetching offline content", event);
          return caches.match("/offline.html");
        }
      });
    }),
  );
}

function onPush(event) {
  let title = (event.data && event.data.text()) || "Yay a message";
  let body = "We have received a push message";
  let tag = "push-simple-demo-notification-tag";
  let icon = "/assets/my-logo-120x120.png";

  event.waitUntil(
    self.registration.showNotification(title, { body, icon, tag }),
  );
}

//self.addEventListener('install', onInstall);
//self.addEventListener('activate', onActivate);
//self.addEventListener('fetch', onFetch);
self.addEventListener("push", onPush);
